name: Mac Components Tests

defaults:
  run:
    shell: bash -l {0}

on:
  pull_request:
    branches: [ "main", "dev" ]
    paths:
      - 'MacOS/Components/**'
      - '.github/workflows/mac_components.yml'
  push:
    branches: [ "dev" ]
    paths:
      - 'MacOS/Components/**'
      - '.github/workflows/mac_components.yml'
  workflow_dispatch:
    inputs:
      test_branch:
        description: 'Branch to test (default: current branch)'
        required: false
        default: ''
  schedule:
    - cron: "0 2 * * 0"  # Run every Sunday at 2 AM UTC

env:
  PYTHON_VERSION_PS: "3.11"

jobs:
  validate:
    name: Validate Code & Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
          
      - name: Validate shell scripts
        run: |
          echo "🔍 Validating shell scripts..."
          find MacOS/Components -name "*.sh" -type f | while read -r file; do
            echo "Checking $file"
            # Use relaxed shellcheck rules for these scripts
            shellcheck -e SC1090,SC1091,SC2034,SC2086,SC2181 "$file" || true
          done
          
      - name: Check script permissions
        run: |
          echo "🔒 Checking script permissions..."
          find MacOS/Components -name "*.sh" -type f | while read -r file; do
            if [ ! -x "$file" ]; then
              echo "⚠️  $file is not executable"
            else
              echo "✓ $file is executable"
            fi
          done
          
      - name: Validate workflow syntax
        run: |
          echo "📋 Validating GitHub Actions workflows..."
          for workflow in .github/workflows/*.yml; do
            echo "Validating $workflow"
            python3 -c "import yaml; yaml.safe_load(open('$workflow'))" || exit 1
            echo "✓ $workflow is valid YAML"
          done
          
      - name: Check component documentation
        run: |
          echo "📚 Checking component documentation..."
          components=("Homebrew" "Python" "VSC" "Latex" "Diagnostics")
          for component in "${components[@]}"; do
            if [ -d "MacOS/Components/$component" ]; then
              echo "✓ $component component directory exists"
              
              if [ -f "MacOS/Components/$component/install.sh" ]; then
                echo "✓ $component has install.sh"
              else
                echo "⚠️  $component missing install.sh"
              fi
            else
              echo "❌ $component component directory missing"
              exit 1
            fi
          done

  test-homebrew:
    name: Test Homebrew Component
    runs-on: macos-latest
    
    steps:
      - name: Remove existing Homebrew
        run: |
          if command -v brew > /dev/null; then
            echo "Removing existing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)" || true
          fi

      - name: Install Homebrew Component
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.event_name == 'workflow_dispatch' && github.repository || github.event_name == 'schedule' && 'philipnickel/pythonsupport-scripts' || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.event_name == 'workflow_dispatch' && (inputs.test_branch || github.ref_name) || github.event_name == 'schedule' && 'main' || github.ref_name }}
        run: |
          echo "Testing Homebrew from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Homebrew/install.sh)"

      - name: Verify Homebrew Installation
        run: |
          brew --version
          brew doctor || echo "Homebrew doctor found issues (expected in CI)"

  test-python:
    name: Test Python Component
    runs-on: macos-latest
    
    steps:
      - name: Clean existing conda installations
        run: |
          if command -v conda > /dev/null; then
            conda init --reverse --all || true
          fi
          rm -rf ~/miniconda* ~/anaconda* ~/.conda ~/.condarc || true

      - name: Install Python Component
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.event_name == 'workflow_dispatch' && github.repository || github.event_name == 'schedule' && 'philipnickel/pythonsupport-scripts' || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.event_name == 'workflow_dispatch' && (inputs.test_branch || github.ref_name) || github.event_name == 'schedule' && 'main' || github.ref_name }}
        run: |
          echo "Testing Python from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Python/install.sh)"

      - name: Install First Year Setup
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.event_name == 'workflow_dispatch' && github.repository || github.event_name == 'schedule' && 'philipnickel/pythonsupport-scripts' || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.event_name == 'workflow_dispatch' && (inputs.test_branch || github.ref_name) || github.event_name == 'schedule' && 'main' || github.ref_name }}
        run: |
          source ~/.bashrc || true
          echo "Testing First Year Setup from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Python/first_year_setup.sh)"

      - name: Verify Python Installation
        run: |
          source ~/.bashrc || true
          which conda
          conda --version
          conda info --base
          
          # Verify Python version
          EXPECTED_VERSION="${{ env.PYTHON_VERSION_PS }}"
          INSTALLED_VERSION=$(python3 --version | cut -d " " -f 2)
          if [[ "$INSTALLED_VERSION" != "$EXPECTED_VERSION"* ]]; then
            echo "Installed Python version ($INSTALLED_VERSION) does not match expected version ($EXPECTED_VERSION)"
            exit 1
          fi
          
          # Verify packages
          python3 -c "import dtumathtools, pandas, scipy, statsmodels, uncertainties; print('All packages imported successfully')"

  test-vscode:
    name: Test VSCode Component
    runs-on: macos-latest
    
    steps:
      - name: Remove existing VS Code
        run: |
          rm -rf "/Applications/Visual Studio Code.app" || true
          rm -rf ~/.vscode* || true

      - name: Install VSCode Component
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.event_name == 'workflow_dispatch' && github.repository || github.event_name == 'schedule' && 'philipnickel/pythonsupport-scripts' || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.event_name == 'workflow_dispatch' && (inputs.test_branch || github.ref_name) || github.event_name == 'schedule' && 'main' || github.ref_name }}
        run: |
          echo "Testing VSCode from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/VSC/install.sh)"

      - name: Install VSCode Extensions
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.event_name == 'workflow_dispatch' && github.repository || github.event_name == 'schedule' && 'philipnickel/pythonsupport-scripts' || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.event_name == 'workflow_dispatch' && (inputs.test_branch || github.ref_name) || github.event_name == 'schedule' && 'main' || github.ref_name }}
        run: |
          echo "Testing VSCode Extensions from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/VSC/install_extensions.sh)"

      - name: Verify VSCode Installation
        run: |
          code --version
          
          # Verify extensions
          extensions=("ms-python.python" "ms-toolsai.jupyter" "tomoki1207.pdf")
          for ext in "${extensions[@]}"; do
            if ! code --list-extensions | grep -q "^$ext$"; then
              echo "Extension $ext not installed"
              exit 1
            else
              echo "✓ Extension $ext is installed"
            fi
          done

  test-latex:
    name: Test LaTeX Component
    runs-on: macos-latest
    
    steps:
      - name: Install LaTeX Component
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.event_name == 'workflow_dispatch' && github.repository || github.event_name == 'schedule' && 'philipnickel/pythonsupport-scripts' || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.event_name == 'workflow_dispatch' && (inputs.test_branch || github.ref_name) || github.event_name == 'schedule' && 'main' || github.ref_name }}
        run: |
          echo "Testing LaTeX from: $REMOTE_PS/$BRANCH_PS"
          # Auto-answer yes to the prompt
          echo "y" | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Latex/install.sh)"

      - name: Verify LaTeX Installation
        run: |
          # Verify pandoc
          pandoc --version
          
          # Verify TeX
          tlmgr --version
          
          # Verify nbconvert
          python3 -c "import nbconvert; print('nbconvert available')"

  test-diagnostics:
    name: Test Diagnostics Component
    runs-on: macos-latest
    needs: [test-homebrew, test-python, test-vscode]
    
    steps:
      - name: Run Diagnostics
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.event_name == 'workflow_dispatch' && github.repository || github.event_name == 'schedule' && 'philipnickel/pythonsupport-scripts' || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.event_name == 'workflow_dispatch' && (inputs.test_branch || github.ref_name) || github.event_name == 'schedule' && 'main' || github.ref_name }}
        run: |
          echo "Testing Diagnostics from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Diagnostics/run.sh)"

  test-integration:
    name: Test Full Integration
    runs-on: macos-latest
    
    steps:
      - name: Clean System
        run: |
          # Remove existing installations
          if command -v brew > /dev/null; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)" || true
          fi
          rm -rf ~/miniconda* ~/anaconda* ~/.conda ~/.condarc || true
          rm -rf "/Applications/Visual Studio Code.app" || true
          rm -rf ~/.vscode* || true

      - name: Full Component Installation
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.event_name == 'workflow_dispatch' && github.repository || github.event_name == 'schedule' && 'philipnickel/pythonsupport-scripts' || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.event_name == 'workflow_dispatch' && (inputs.test_branch || github.ref_name) || github.event_name == 'schedule' && 'main' || github.ref_name }}
        run: |
          echo "Testing Full Integration from: $REMOTE_PS/$BRANCH_PS"
          
          # Install all components in sequence
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Homebrew/install.sh)"
          source ~/.bash_profile || true
          
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Python/install.sh)"
          source ~/.bashrc || true
          
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Python/first_year_setup.sh)"
          
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/VSC/install.sh)"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/VSC/install_extensions.sh)"

      - name: Run Full Diagnostics
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.event_name == 'workflow_dispatch' && github.repository || github.event_name == 'schedule' && 'philipnickel/pythonsupport-scripts' || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.event_name == 'workflow_dispatch' && (inputs.test_branch || github.ref_name) || github.event_name == 'schedule' && 'main' || github.ref_name }}
        run: |
          source ~/.bashrc || true
          echo "Running Final Diagnostics from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Diagnostics/run.sh)"