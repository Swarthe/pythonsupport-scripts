name: Mac Components Tests

defaults:
  run:
    shell: bash -l {0}

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - 'MacOS/Components/**'
  push:
    branches: [ "main" ]
    paths:
      - 'MacOS/Components/**'
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * 0"  # Run every Sunday at 2 AM UTC

env:
  PYTHON_VERSION_PS: "3.11"

jobs:
  test-homebrew:
    name: Test Homebrew Component
    runs-on: macos-latest
    
    steps:
      - name: Remove existing Homebrew
        run: |
          if command -v brew > /dev/null; then
            echo "Removing existing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)" || true
          fi

      - name: Install Homebrew Component
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Testing Homebrew from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Homebrew/install.sh)"

      - name: Verify Homebrew Installation
        run: |
          brew --version
          brew doctor || echo "Homebrew doctor found issues (expected in CI)"

  test-python:
    name: Test Python Component
    runs-on: macos-latest
    
    steps:
      - name: Clean existing conda installations
        run: |
          if command -v conda > /dev/null; then
            conda init --reverse --all || true
          fi
          rm -rf ~/miniconda* ~/anaconda* ~/.conda ~/.condarc || true

      - name: Install Python Component
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Testing Python from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Python/install.sh)"

      - name: Verify Python Installation
        run: |
          source ~/.bashrc || true
          which conda
          conda --version
          conda info --base
          
          # Verify basic Python functionality
          python3 --version
          python3 -c "print('Python is working!')"
          
          # Verify conda functionality
          conda list

  test-vscode:
    name: Test VSCode Component
    runs-on: macos-latest
    
    steps:
      - name: Remove existing VS Code
        run: |
          rm -rf "/Applications/Visual Studio Code.app" || true
          rm -rf ~/.vscode* || true

      - name: Install VSCode Component
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Testing VSCode from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/VSC/install.sh)"

      - name: Install VSCode Extensions
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Testing VSCode Extensions from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/VSC/install_extensions.sh)"

      - name: Verify VSCode Installation
        run: |
          code --version
          
          # Verify extensions
          extensions=("ms-python.python" "ms-toolsai.jupyter" "tomoki1207.pdf")
          for ext in "${extensions[@]}"; do
            if ! code --list-extensions | grep -q "^$ext$"; then
              echo "Extension $ext not installed"
              exit 1
            else
              echo "OK: Extension $ext is installed"
            fi
          done

  test-latex:
    name: Test LaTeX Component
    runs-on: macos-latest
    
    steps:
      - name: Install LaTeX Component
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Testing LaTeX from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Latex/install.sh)"

      - name: Verify LaTeX Installation
        run: |
          # Update PATH to include TeX binaries
          export PATH="/usr/local/texlive/2024basic/bin/universal-darwin:/usr/local/texlive/2023basic/bin/universal-darwin:$PATH"
          
          # Verify pandoc
          pandoc --version
          
          # Verify TeX (check if tlmgr is available)
          if command -v tlmgr >/dev/null 2>&1; then
            tlmgr --version
            echo "tlmgr is working"
          else
            echo "tlmgr not found in PATH, checking TeX installation"
            # Just verify that BasicTeX was installed by checking for pdflatex
            if command -v pdflatex >/dev/null 2>&1; then
              pdflatex --version | head -1
              echo "TeX installation verified via pdflatex"
            else
              echo "TeX installation failed - neither tlmgr nor pdflatex found"
              exit 1
            fi
          fi
          
          # Verify nbconvert
          python3 -c "import nbconvert; print('nbconvert available')"

  test-diagnostics:
    name: Test Diagnostics Component
    runs-on: macos-latest
    needs: [test-homebrew, test-python, test-vscode]
    
    steps:
      - name: Run Diagnostics
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Testing Diagnostics from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Diagnostics/run.sh)"

  test-integration:
    name: Test Full Integration
    runs-on: macos-latest
    
    steps:
      - name: Clean System
        run: |
          # Remove existing installations
          if command -v brew > /dev/null; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)" || true
          fi
          rm -rf ~/miniconda* ~/anaconda* ~/.conda ~/.condarc || true
          rm -rf "/Applications/Visual Studio Code.app" || true
          rm -rf ~/.vscode* || true

      - name: Full Component Installation
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Testing Full Integration from: $REMOTE_PS/$BRANCH_PS"
          
          # Install all components in sequence
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Homebrew/install.sh)"
          source ~/.bash_profile || true
          
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Python/install.sh)"
          source ~/.bashrc || true
          
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Python/first_year_setup.sh)"
          
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/VSC/install.sh)"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/VSC/install_extensions.sh)"

      - name: Run Full Diagnostics
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          source ~/.bashrc || true
          echo "Running Final Diagnostics from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Diagnostics/run.sh)"