name: Constructor Test Final

on:
  workflow_dispatch:
  # Disabled: superseded by constructor-build-and-test.yml
  # push:
  #   branches: [constructor-pkg-installer]

env:
  PYTHON_VERSION_PS: "3.11"

jobs:
  build-and-test-pkg:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ env.PYTHON_VERSION_PS }}
          channels: conda-forge
          channel-priority: strict

      - name: Install Constructor
        shell: bash -el {0}
        run: |
          conda install constructor -y
          constructor --version

      - name: Build Installer
        shell: bash -el {0}
        working-directory: MacOS/constructor_installer/python_stack
        run: |
          echo "Building constructor installer..."
          ./build.sh

      - name: Install and Test
        shell: bash -el {0}
        working-directory: MacOS/constructor_installer/python_stack
        run: |
          # Find the installer file (PKG or SH)
          PKG_FILE=$(find . -name "*.pkg" -type f 2>/dev/null | head -1)
          SH_FILE=$(find . -name "*.sh" -type f 2>/dev/null | head -1)
          
          if [[ -n "$PKG_FILE" ]]; then
            INSTALLER_FILE="$PKG_FILE"
            INSTALLER_TYPE="pkg"
          elif [[ -n "$SH_FILE" ]]; then
            INSTALLER_FILE="$SH_FILE"
            INSTALLER_TYPE="sh"
          else
            echo "‚ùå No installer file found"
            exit 1
          fi
          
          echo "‚úÖ Installer built: $INSTALLER_FILE ($INSTALLER_TYPE)"
          echo "üìÅ Size: $(du -h "$INSTALLER_FILE" | cut -f1)"
          
          # Install based on type
          echo ""
          if [[ "$INSTALLER_TYPE" == "pkg" ]]; then
            echo "=== Installing PKG ==="
            # Try installing without sudo and with CurrentUserHomeDirectory
            echo "Attempting installation without sudo..."
            CONDA_VERBOSITY=3 installer -verbose -pkg "$INSTALLER_FILE" -target CurrentUserHomeDirectory -dumplog
            CONDA_PATH="$HOME/miniconda3"  # PKG installs to standard location
          else
            echo "=== Running Shell Installer ==="
            bash "$INSTALLER_FILE" -b -p ~/dtu-python-stack
            CONDA_PATH="$HOME/dtu-python-stack"  # Shell installer uses custom path
          fi
          
          echo ""
          echo "=== Testing Installation ==="
          
          # Give installation a moment to complete
          sleep 5
          
          # Debug: Show where constructor might have installed
          echo "=== Debug: Searching for constructor installation ==="
          find "$HOME" -name "conda" -type f -executable 2>/dev/null | head -10 || echo "No conda executables found in home"
          find /opt -name "conda" -type f -executable 2>/dev/null | head -10 || echo "No conda executables found in /opt"
          ls -la "$HOME/" | grep -E "(conda|miniconda|anaconda)" || echo "No conda directories in home"
          
          # Update PATH to include common conda locations
          export PATH="/opt/homebrew/bin:/usr/local/bin:/opt/homebrew/Caskroom/miniconda/base/bin:/usr/local/Caskroom/miniconda/base/bin:$PATH"
          
          # Initialize the installed conda environment (CONDA_PATH set above based on installer type)
          # For PKG installer, check multiple possible installation locations
          if [[ "$INSTALLER_TYPE" == "pkg" ]]; then
            # PKG might install to different locations, check them in priority order
            for try_path in "$HOME/miniconda3" "$HOME/anaconda3" "/opt/miniconda3" "/opt/anaconda3"; do
              if [ -f "$try_path/bin/conda" ]; then
                CONDA_PATH="$try_path"
                # Check if this is our constructor installation by checking Python version
                PYTHON_VERSION=$("$try_path/bin/python3" --version 2>/dev/null | cut -d " " -f 2 | cut -d "." -f1,2)
                if [[ "$PYTHON_VERSION" == "3.11" ]]; then
                  echo "Found constructor conda installation at: $CONDA_PATH (Python $PYTHON_VERSION)"
                  break
                else
                  echo "Found conda at $try_path but wrong Python version: $PYTHON_VERSION (expected 3.11)"
                fi
              fi
            done
          fi
          
          if [ -f "$CONDA_PATH/bin/conda" ]; then
            echo "Using conda at: $CONDA_PATH"
            export PATH="$CONDA_PATH/bin:$PATH"
            if [ -f "$CONDA_PATH/etc/profile.d/conda.sh" ]; then
              source "$CONDA_PATH/etc/profile.d/conda.sh"
              conda activate base 2>/dev/null || true
            fi
            CONDA_FOUND=true
          else
            CONDA_FOUND=false
          fi
          
          if [ "$CONDA_FOUND" = false ]; then
            echo "‚ùå Could not find conda installation"
            exit 1
          fi
          
          # Test conda
          echo "Testing conda..."
          conda --version || exit 1
          echo "‚úÖ Conda works: $(conda --version)"
          
          # Test Python version
          echo "Testing Python..."
          PYTHON_VERSION=$(python3 --version | cut -d " " -f 2)
          echo "‚úÖ Python version: $PYTHON_VERSION"
          
          if [[ "$PYTHON_VERSION" != "${{ env.PYTHON_VERSION_PS }}"* ]]; then
            echo "‚ùå Python version mismatch. Expected: ${{ env.PYTHON_VERSION_PS }}, Got: $PYTHON_VERSION"
            exit 1
          fi
          
          # Test package imports - THE CRITICAL TEST!
          echo ""
          echo "=== Testing Package Imports ==="
          
          # Test basic packages (bundled in constructor)
          if python3 -c "import pandas, scipy, statsmodels, uncertainties; print('‚úÖ Core packages work')"; then
            echo "‚úÖ Core scientific packages imported successfully"
          else
            echo "‚ùå Core package imports failed"
            exit 1
          fi
          
          # Test dtumathtools (post-install script)
          echo "Testing dtumathtools (post-install script)..."
          if python3 -c "import dtumathtools; print('‚úÖ dtumathtools works')"; then
            echo "‚úÖ dtumathtools imported successfully (post-install script worked)"
          else
            echo "‚ùå dtumathtools import failed (post-install script issue)"
            echo "This is expected - dtumathtools install via pip in post-install script"
            
            # Try manual dtumathtools install to debug
            echo "Attempting manual dtumathtools install..."
            pip install dtumathtools
            
            if python3 -c "import dtumathtools; print('‚úÖ dtumathtools works after manual install')"; then
              echo "‚úÖ dtumathtools works when installed manually"
              echo "‚ö†Ô∏è  Issue: post-install script didn't run or failed"
            else
              echo "‚ùå dtumathtools still fails even with manual install"
              exit 1
            fi
          fi
          
          echo ""
          echo "üéâ CONSTRUCTOR INSTALLER TEST: SUCCESS!"
          echo "‚úÖ $INSTALLER_TYPE installer runs correctly"
          echo "‚úÖ Python environment works"
          echo "‚úÖ Scientific packages import successfully" 
          echo "‚úÖ Constructor approach is viable!"