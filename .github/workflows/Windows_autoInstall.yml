name: Windows_autoInstall

defaults:
  run:
    shell: bash -l {0}

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - 'Windows/**'
      - '.github/workflows/Windows_autoInstall.yml'
  push:
    branches: [ "main" ]
    paths:
      - 'Windows/**'
      - '.github/workflows/Windows_autoInstall.yml'

env:
  PYTHON_VERSION_PS: "3.11"
  PIS_ENV: "CI"

jobs:
  test-constructor-windows:
    name: Test Constructor Installer (Windows)
    runs-on: windows-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Miniforge (Windows)
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          python-version: 3.11
          channels: conda-forge
          use-mamba: true
          mamba-version: "*"
          conda-solver: libmamba
          cache-environment: true
          cache-environment-key: constructor-windows-env-${{ hashFiles('Windows/constructor_installer/python_stack/construct.yaml') }}

      - name: Configure conda-forge only (Windows)
        run: |
          # Remove all default channels completely
          conda config --remove-key channels 2>/dev/null || true
          conda config --add channels conda-forge
          conda config --set channel_priority strict
          # Remove any existing defaults channel references
          conda config --remove channels defaults 2>/dev/null || true
          # Show final config
          conda config --show channels

      - name: Install Constructor (Windows)
        shell: pwsh
        run: |
          # Install constructor with logging support
          mamba install "nsis=*=*log*" constructor -y

      - name: Build Constructor Python EXE
        shell: pwsh
        run: |
          cd Windows/constructor_installer/python_stack
          # Enable NSIS logging support
          $env:NSIS_USING_LOG_BUILD = "1"
          constructor . --output-dir=builds

      - name: Install Constructor EXE
        timeout-minutes: 10
        shell: pwsh
        run: |
          Write-Host "Installing Constructor EXE..."
          # Find the built EXE
          $EXE_FILE = Get-ChildItem -Path "Windows/constructor_installer/python_stack/builds" -Filter "*.exe" | Select-Object -First 1
          if (-not $EXE_FILE) {
            Write-Host "No EXE file found"
            exit 1
          }
          
          $EXE_PATH = $EXE_FILE.FullName
          $INSTALL_DIR = "C:\dtu-python-stack"
          
          Write-Host "Installing: $EXE_PATH"
          Write-Host "File size: $([math]::Round($EXE_FILE.Length/1MB, 2)) MB"
          Write-Host "Installation target: $INSTALL_DIR"
          Write-Host "Starting installation with maximum verbosity..."
          
          # Set maximum conda verbosity for installation
          $env:CONDA_VERBOSITY = "3"
          
          # Use simpler direct execution
          $startTime = Get-Date
          Write-Host "Command: `"$EXE_PATH`" /S /InstallationType=JustMe /RegisterPython=1 /NoShortcuts=1 /D=$INSTALL_DIR"
          
          # Run installer directly (path doesn't contain spaces now)
          $process = Start-Process -FilePath "$EXE_PATH" -ArgumentList "/S", "/InstallationType=JustMe", "/RegisterPython=1", "/NoShortcuts=1", "/D=$INSTALL_DIR" -Wait -PassThru -NoNewWindow
          
          $endTime = Get-Date
          $duration = ($endTime - $startTime).TotalSeconds
          Write-Host "Installation completed in $([math]::Round($duration, 2)) seconds with exit code: $($process.ExitCode)"
          
          # Check for installation logs
          Write-Host "Checking for installation logs..."
          $logPath = "$INSTALL_DIR\install.log"
          if (Test-Path $logPath) {
            Write-Host "Found installation log at: $logPath"
            Write-Host "=== INSTALLATION LOG (last 100 lines) ==="
            Get-Content $logPath -Tail 100
            Write-Host "=== END INSTALLATION LOG ==="
          } else {
            Write-Host "No install.log found at expected location: $logPath"
          }
          
          if ($process.ExitCode -eq 0) {
            Write-Host "✓ Constructor EXE installation successful"
            Write-Host "Checking installation directory..."
            if (Test-Path $INSTALL_DIR) {
              Write-Host "✓ Installation directory created"
              $size = (Get-ChildItem $INSTALL_DIR -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1MB
              Write-Host "Directory size: $([math]::Round($size, 2)) MB"
              Write-Host "Contents:"
              Get-ChildItem $INSTALL_DIR | Select-Object -First 20 | Format-Table Name, Length, LastWriteTime
              
              # Check for Python executable
              $pythonPaths = @(
                "$INSTALL_DIR\python.exe",
                "$INSTALL_DIR\Scripts\python.exe"
              )
              $pythonFound = $false
              foreach ($path in $pythonPaths) {
                if (Test-Path $path) {
                  Write-Host "✓ Python executable found at: $path"
                  $pythonFound = $true
                  break
                }
              }
              if (-not $pythonFound) {
                Write-Host "⚠ Python executable not found in expected locations"
              }
            } else {
              Write-Host "⚠ Installation directory not found"
              Write-Host "Checking alternative locations..."
              Get-ChildItem $env:USERPROFILE | Where-Object {$_.Name -like "*python*"} | Select-Object Name, LastWriteTime
            }
          } else {
            Write-Host "✗ Constructor EXE installation failed with exit code: $($process.ExitCode)"
            Write-Host "Checking for error logs..."
            Get-ChildItem $env:TEMP -Filter "*install*" -ErrorAction SilentlyContinue | Select-Object -First 10
            exit 1
          }

      - name: Verify Python Environment Only
        run: |
          echo "Skipping VS Code verification - not installed in post-install script"
          echo "Focus is on Python environment functionality"

      - name: Verify conda (Windows)
        run: |
          # Check for conda in constructor installation
          CONDA_PATHS=(
            "$HOME/dtu-python-stack/Scripts/conda.exe"
            "$HOME/dtu-python-stack/condabin/conda.bat"
            "$HOME/miniconda3/Scripts/conda.exe"
          )
          
          CONDA_FOUND=false
          for conda_path in "${CONDA_PATHS[@]}"; do
            if [ -f "$conda_path" ]; then
              echo "Found conda at: $conda_path"
              "$conda_path" --version
              CONDA_FOUND=true
              break
            fi
          done
          
          if [ "$CONDA_FOUND" = false ]; then
            echo "Conda not found in expected locations"
            exit 1
          fi

      - name: Verify python (3.11) (Windows)
        run: |
          # Find constructor Python
          PYTHON_PATHS=(
            "$HOME/dtu-python-stack/python.exe"
            "$HOME/dtu-python-stack/Scripts/python.exe"
            "$HOME/miniconda3/python.exe"
          )
          
          PYTHON_FOUND=false
          for python_path in "${PYTHON_PATHS[@]}"; do
            if [ -f "$python_path" ]; then
              echo "Found Python at: $python_path"
              
              # Verify the installed Python version
              EXPECTED_VERSION="3.11"
              INSTALLED_VERSION=$("$python_path" --version | cut -d " " -f 2)
              if [[ "$INSTALLED_VERSION" != "$EXPECTED_VERSION"* ]]; then
                echo "Installed Python version ($INSTALLED_VERSION) does not match expected version ($EXPECTED_VERSION)"
                exit 1
              fi
              echo "Correct Python version $INSTALLED_VERSION is installed."
              
              # Verify Python package imports
              "$python_path" -c "import dtumathtools, pandas, scipy, statsmodels, uncertainties; print('Packages imported successfully')" || { echo "Failed to import Python packages"; exit 1; }
              
              PYTHON_FOUND=true
              break
            fi
          done
          
          if [ "$PYTHON_FOUND" = false ]; then
            echo "Python not found in expected locations"
            exit 1
          fi

      - name: Upload Constructor EXE
        uses: actions/upload-artifact@v4
        with:
          name: dtu-constructor-exe
          path: Windows/constructor_installer/python_stack/builds/*.exe
          retention-days: 30