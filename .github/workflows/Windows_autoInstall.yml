name: Windows_autoInstall

defaults:
  run:
    shell: bash -l {0}

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - 'Windows/**'
      - '.github/workflows/Windows_autoInstall.yml'
  push:
    branches: [ "main" ]
    paths:
      - 'Windows/**'
      - '.github/workflows/Windows_autoInstall.yml'

env:
  PYTHON_VERSION_PS: "3.11"
  PIS_ENV: "CI"

jobs:
  test-constructor-windows:
    name: Test Constructor Installer (Windows)
    runs-on: windows-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Miniforge (Windows)
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          python-version: 3.11
          channels: conda-forge
          use-mamba: true
          mamba-version: "*"
          conda-solver: libmamba
          cache-environment: true
          cache-environment-key: constructor-windows-env-${{ hashFiles('Windows/constructor_installer/python_stack/construct.yaml') }}

      - name: Configure conda-forge only (Windows)
        run: |
          # Remove all default channels completely
          conda config --remove-key channels 2>/dev/null || true
          conda config --add channels conda-forge
          conda config --set channel_priority strict
          # Remove any existing defaults channel references
          conda config --remove channels defaults 2>/dev/null || true
          # Show final config
          conda config --show channels

      - name: Install Constructor (Windows)
        shell: pwsh
        run: |
          mamba install constructor -y

      - name: Build Constructor Python EXE
        shell: pwsh
        run: |
          cd Windows/constructor_installer/python_stack
          constructor . --output-dir=builds

      - name: Install Constructor EXE
        timeout-minutes: 10
        run: |
          echo "Installing Constructor EXE..."
          # Find the built EXE
          EXE_FILE=$(find Windows/constructor_installer/python_stack/builds -name "*.exe" | head -1)
          if [[ -z "$EXE_FILE" ]]; then
            echo "No EXE file found"
            exit 1
          fi
          echo "Installing: $EXE_FILE"
          echo "File size: $(ls -lh "$EXE_FILE" | awk '{print $5}')"
          echo "Installation target: $HOME/dtu-python-stack"
          echo "Starting installation with verbose logging..."
          
          # Install with verbose logging to user directory
          echo "Command: $EXE_FILE /S /AddToPath=1 /RegisterPython=1 /D=$HOME/dtu-python-stack"
          start_time=$(date +%s)
          
          # Run with verbose output and capture any logs
          "$EXE_FILE" /S /AddToPath=1 /RegisterPython=1 /D="$HOME/dtu-python-stack" /CURRENTUSER
          exit_code=$?
          
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "Installation completed in ${duration} seconds with exit code: $exit_code"
          
          # Check for installation logs
          echo "Checking for installation logs..."
          if [ -f "$TEMP/constructor-install.log" ]; then
            echo "Found constructor installation log:"
            tail -50 "$TEMP/constructor-install.log"
          fi
          
          if [ $exit_code -eq 0 ]; then
            echo "✓ Constructor EXE installation successful"
            echo "Checking installation directory..."
            if [ -d "$HOME/dtu-python-stack" ]; then
              echo "✓ Installation directory created"
              echo "Directory size: $(du -sh "$HOME/dtu-python-stack" 2>/dev/null || echo "unknown")"
              echo "Contents:"
              ls -la "$HOME/dtu-python-stack" | head -20
              
              # Check for Python executable
              if [ -f "$HOME/dtu-python-stack/python.exe" ]; then
                echo "✓ Python executable found"
              elif [ -f "$HOME/dtu-python-stack/Scripts/python.exe" ]; then
                echo "✓ Python executable found in Scripts/"
              else
                echo "⚠ Python executable not found in expected locations"
              fi
            else
              echo "⚠ Installation directory not found"
              echo "Checking alternative locations..."
              ls -la "$HOME" | grep -i python || echo "No Python directories found in home"
            fi
          else
            echo "✗ Constructor EXE installation failed with exit code: $exit_code"
            echo "Checking for error logs..."
            find "$TEMP" -name "*install*" -o -name "*error*" -o -name "*log*" 2>/dev/null | head -10
            exit 1
          fi

      - name: Verify Python Environment Only
        run: |
          echo "Skipping VS Code verification - not installed in post-install script"
          echo "Focus is on Python environment functionality"

      - name: Verify conda (Windows)
        run: |
          # Check for conda in constructor installation
          CONDA_PATHS=(
            "$HOME/dtu-python-stack/Scripts/conda.exe"
            "$HOME/dtu-python-stack/condabin/conda.bat"
            "$HOME/miniconda3/Scripts/conda.exe"
          )
          
          CONDA_FOUND=false
          for conda_path in "${CONDA_PATHS[@]}"; do
            if [ -f "$conda_path" ]; then
              echo "Found conda at: $conda_path"
              "$conda_path" --version
              CONDA_FOUND=true
              break
            fi
          done
          
          if [ "$CONDA_FOUND" = false ]; then
            echo "Conda not found in expected locations"
            exit 1
          fi

      - name: Verify python (3.11) (Windows)
        run: |
          # Find constructor Python
          PYTHON_PATHS=(
            "$HOME/dtu-python-stack/python.exe"
            "$HOME/dtu-python-stack/Scripts/python.exe"
            "$HOME/miniconda3/python.exe"
          )
          
          PYTHON_FOUND=false
          for python_path in "${PYTHON_PATHS[@]}"; do
            if [ -f "$python_path" ]; then
              echo "Found Python at: $python_path"
              
              # Verify the installed Python version
              EXPECTED_VERSION="3.11"
              INSTALLED_VERSION=$("$python_path" --version | cut -d " " -f 2)
              if [[ "$INSTALLED_VERSION" != "$EXPECTED_VERSION"* ]]; then
                echo "Installed Python version ($INSTALLED_VERSION) does not match expected version ($EXPECTED_VERSION)"
                exit 1
              fi
              echo "Correct Python version $INSTALLED_VERSION is installed."
              
              # Verify Python package imports
              "$python_path" -c "import dtumathtools, pandas, scipy, statsmodels, uncertainties; print('Packages imported successfully')" || { echo "Failed to import Python packages"; exit 1; }
              
              PYTHON_FOUND=true
              break
            fi
          done
          
          if [ "$PYTHON_FOUND" = false ]; then
            echo "Python not found in expected locations"
            exit 1
          fi

      - name: Upload Constructor EXE
        uses: actions/upload-artifact@v4
        with:
          name: dtu-constructor-exe
          path: Windows/constructor_installer/python_stack/builds/*.exe
          retention-days: 30