name: MacOS Orchestrators Tests

defaults:
  run:
    shell: bash -l {0}

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - 'MacOS/Components/**'
      - '.github/workflows/mac_orchestrators.yml'
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"  # Run every Sunday at midnight UTC

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        has-conda: [true, false]  # Test with pre-installed conda
        python-version: ["3.10", "3.11"]  # Test multiple Python versions
        os: [macos-latest, macos-13]  # Test on different macOS versions
        orchestrator: ["first_year_students"]  # Test different orchestrators

    steps:

      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v3
        if: ${{ matrix.has-conda }}
        with:
          auto-activate-base: true
          activate-environment: ""

      - name: Remove conda (if present)
        if: ${{ !matrix.has-conda }}
        run: |
          if type conda > /dev/null ; then
            echo "Base environment location:"
            conda info --base

            echo "Removing conda from the environment..."
            # try and disable things in the boot-up scripts
            conda init --reverse --all
          fi

          for f in bash_profile bashrc xonshrc
          do
            [ ! -e $HOME/.$f ] && continue
            echo ""
            echo "<<< .$f >>>"
            cat $HOME/.$f
          done

      - name: Check for conda
        run: |
          env | grep -i conda
          if type conda > /dev/null ; then
            echo "Base environment location:"
            conda info --base
          else
            echo "Conda not found..."
          fi

          for f in bash_profile bashrc xonshrc
          do
            [ ! -e $HOME/.$f ] && continue
            echo ""
            echo "<<< .$f >>>"
            cat $HOME/.$f
          done

      - name: Install from main
        if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
        env:
          PYTHON_VERSION_PS: ${{ matrix.python-version }}
        run: |
          echo "Running orchestrator ${{ matrix.orchestrator }} from remote dtudk on branch main with Python $PYTHON_VERSION_PS"
          if [[ "${{ matrix.has-conda }}" == "true" ]]; then
            { yes yes || true; } | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/dtudk/pythonsupport-scripts/main/MacOS/Components/orchestrators/${{ matrix.orchestrator }}.sh)"
          else
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/dtudk/pythonsupport-scripts/main/MacOS/Components/orchestrators/${{ matrix.orchestrator }}.sh)"
          fi

      - name: Install from ${{ github.event.pull_request.head.ref }}
        if: ${{ github.event_name != 'schedule' && github.event_name != 'workflow_dispatch' }}
        env:
          # TODO, this will *not* catch when a user forks the repo, and change the name of the project
          REMOTE_PS: ${{ github.event.pull_request.head.repo.full_name }}
          BRANCH_PS: ${{ github.event.pull_request.head.ref }}
          PYTHON_VERSION_PS: ${{ matrix.python-version }}
        run: |
          echo "Running orchestrator ${{ matrix.orchestrator }} from remote $REMOTE_PS on branch $BRANCH_PS with Python $PYTHON_VERSION_PS"
          if [[ "${{ matrix.has-conda }}" == "true" ]]; then
            { yes yes || true; } | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/orchestrators/${{ matrix.orchestrator }}.sh)"
          else
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/orchestrators/${{ matrix.orchestrator }}.sh)"
          fi

      - name: Verify VS Code
        run: |
          code --version
          retval=$?
          if [[ $retval -ne 0 ]]; then
            echo "VS Code not installed correctly"
          fi
          exit $retval

      - name: Verify Miniconda Installation
        run: |
          # Check that conda is available
          which conda
          retval=$?
          if [[ $retval -ne 0 ]]; then
            echo "Conda not installed correctly"
            exit $retval
          fi

          # Verify conda info
          conda --version
          conda info --base

          # Verify python3 runs through miniconda (not system Python)
          PYTHON_PATH=$(which python3)
          CONDA_BASE=$(conda info --base)
          
          if [[ "$PYTHON_PATH" == *"$CONDA_BASE"* ]]; then
            echo "✓ python3 correctly uses Miniconda: $PYTHON_PATH"
          else
            echo "✗ python3 not using Miniconda. Found: $PYTHON_PATH"
            echo "Expected path to contain: $CONDA_BASE"
            exit 1
          fi

      - name: Verify VSCode and Extensions
        run: |
          # Check VS Code installation
          code --version
          retval=$?
          if [[ $retval -ne 0 ]]; then
            echo "VS Code not installed correctly"
            exit $retval
          fi

          # Check for Python extensions
          echo "Checking for Python development extensions..."
          code --list-extensions | grep -i python || { 
            echo "Python extension not found"
            echo "Installed extensions:"
            code --list-extensions
            exit 1
          }

      - name: Verify First Year Setup
        run: |
          # Verify the installed Python version matches expectations
          EXPECTED_VERSION="${{ matrix.python-version }}"
          INSTALLED_VERSION=$(python3 --version | cut -d " " -f 2)
          if [[ "$INSTALLED_VERSION" != "$EXPECTED_VERSION"* ]]; then
            echo "Installed Python version ($INSTALLED_VERSION) does not match expected version ($EXPECTED_VERSION)"
            exit 1
          fi
          echo "✓ Correct Python version $INSTALLED_VERSION is installed."

          # Verify Python package imports for first-year courses
          echo "Testing first-year course packages..."
          python3 -c "
import sys
print(f'Python executable: {sys.executable}')
print('Testing package imports...')

try:
    import dtumathtools
    print('✓ dtumathtools imported successfully')
except ImportError as e:
    print(f'✗ dtumathtools import failed: {e}')
    sys.exit(1)

try:
    import pandas
    print('✓ pandas imported successfully')
except ImportError as e:
    print(f'✗ pandas import failed: {e}')
    sys.exit(1)

try:
    import scipy
    print('✓ scipy imported successfully')
except ImportError as e:
    print(f'✗ scipy import failed: {e}')
    sys.exit(1)

try:
    import statsmodels
    print('✓ statsmodels imported successfully')
except ImportError as e:
    print(f'✗ statsmodels import failed: {e}')
    sys.exit(1)

try:
    import uncertainties
    print('✓ uncertainties imported successfully')
except ImportError as e:
    print(f'✗ uncertainties import failed: {e}')
    sys.exit(1)

print('All first-year course packages imported successfully!')
" || { echo "First-year package verification failed"; exit 1; }