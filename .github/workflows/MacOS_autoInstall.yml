name: MacOS_autoInstall

defaults:
  run:
    shell: bash -l {0}

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - 'MacOS/**'
      - '.github/workflows/MacOS_autoInstall.yml'
  push:
    branches: [ "main" ]
    paths:
      - 'MacOS/**'
      - '.github/workflows/MacOS_autoInstall.yml'
  workflow_dispatch:
    inputs:
      pkg_path:
        description: 'Path to PKG file to test'
        required: false
        type: string

env:
  PYTHON_VERSION_PS: "3.11"
  PIS_ENV: "CI"

jobs:
  test-constructor:
    name: Test Constructor Installer
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: 3.11
          channels: conda-forge

      - name: Install Constructor
        run: |
          conda install -c conda-forge constructor -y

      - name: Build Constructor Python PKG
        run: |
          cd MacOS/constructor_installer/python_stack
          ./build.sh

      - name: Build VSCode PKG
        run: |
          cd MacOS/constructor_installer/vscode_component
          ./build_vscode_pkg.sh

      - name: Build Unified Distribution PKG
        run: |
          cd MacOS/constructor_installer/distribution
          ./build_combined.sh

      - name: Install Unified PKG
        run: |
          echo "Installing Unified DTU PKG..."
          # Find the built unified PKG
          PKG_FILE=$(find MacOS/constructor_installer/distribution/builds -name "DTU-Python-Development-Environment-*.pkg" | head -1)
          if [[ -z "$PKG_FILE" ]]; then
            echo "No unified PKG file found"
            exit 1
          fi
          echo "Installing: $PKG_FILE"
          
          # Install unified package
          sudo installer -verbose -pkg "$PKG_FILE" -target /
          echo "Unified PKG installation completed"

      - name: Verify VS Code
        run: |
          code --version
          retval=$?
          if [[ $retval -ne 0 ]]; then
            echo "VS Code not installed correctly"
            exit $retval
          fi

      - name: Verify conda
        run: |
          which conda
          retval=$?
          if [[ $retval -ne 0 ]]; then
            echo "Conda not installed correctly"
            exit $retval
          fi

          # Some more output
          conda --version
          conda info --base

      - name: Verify python (3.11)
        run: |
          which python3

          # Verify the installed Python version
          EXPECTED_VERSION="3.11"
          INSTALLED_VERSION=$(python3 --version | cut -d " " -f 2)
          if [[ "$INSTALLED_VERSION" != "$EXPECTED_VERSION"* ]]; then
            echo "Installed Python version ($INSTALLED_VERSION) does not match expected version ($EXPECTED_VERSION)"
            exit 1
          fi
          echo "Correct Python version $INSTALLED_VERSION is installed."

          # Verify Python package imports
          python3 -c "import dtumathtools, pandas, scipy, statsmodels, uncertainties; print('Packages imported successfully')" || { echo "Failed to import Python packages"; exit 1; }

      - name: Upload Unified DTU PKG
        uses: actions/upload-artifact@v4
        with:
          name: dtu-unified-pkg
          path: MacOS/constructor_installer/distribution/builds/*.pkg
          retention-days: 30

  test-orchestrator:
    name: Test First Year Orchestrator
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Remove conda (if present)
        run: |
          if type conda > /dev/null ; then
            echo "Base environment location:"
            conda info --base

            echo "Removing conda from the environment..."
            # try and disable things in the boot-up scripts
            conda init --reverse --all
          fi

          for f in bash_profile bashrc xonshrc
          do
            [ ! -e $HOME/.$f ] && continue
            echo ""
            echo "<<< .$f >>>"
            cat $HOME/.$f
          done

      - name: Check for conda
        run: |
          env | grep -i conda || echo "No conda environment variables found"
          if type conda > /dev/null ; then
            echo "Base environment location:"
            conda info --base
          else
            echo "Conda not found..."
          fi

          for f in bash_profile bashrc xonshrc
          do
            [ ! -e $HOME/.$f ] && continue
            echo ""
            echo "<<< .$f >>>"
            cat $HOME/.$f
          done

      - name: Run First Year Orchestrator
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
          GITHUB_CI: true
        run: |
          echo "Testing First Year Orchestrator from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/orchestrators/first_year_students.sh)"

      - name: Verify VS Code
        run: |
          code --version
          retval=$?
          if [[ $retval -ne 0 ]]; then
            echo "VS Code not installed correctly"
            exit $retval
          fi

      - name: Verify conda
        run: |
          which conda
          retval=$?
          if [[ $retval -ne 0 ]]; then
            echo "Conda not installed correctly"
            exit $retval
          fi

          # Some more output
          conda --version
          conda info --base

      - name: Verify python (3.11)
        run: |
          which python3

          # Verify the installed Python version
          EXPECTED_VERSION="3.11"
          INSTALLED_VERSION=$(python3 --version | cut -d " " -f 2)
          if [[ "$INSTALLED_VERSION" != "$EXPECTED_VERSION"* ]]; then
            echo "Installed Python version ($INSTALLED_VERSION) does not match expected version ($EXPECTED_VERSION)"
            exit 1
          fi
          echo "Correct Python version $INSTALLED_VERSION is installed."

          # Verify Python package imports
          python3 -c "import dtumathtools, pandas, scipy, statsmodels, uncertainties; print('Packages imported successfully')" || { echo "Failed to import Python packages"; exit 1; }

  test-legacy:
    name: Test Legacy Install
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Remove conda (if present)
        run: |
          if type conda > /dev/null ; then
            echo "Base environment location:"
            conda info --base

            echo "Removing conda from the environment..."
            # try and disable things in the boot-up scripts
            conda init --reverse --all
          fi

          for f in bash_profile bashrc xonshrc
          do
            [ ! -e $HOME/.$f ] && continue
            echo ""
            echo "<<< .$f >>>"
            cat $HOME/.$f
          done

      - name: Check for conda
        run: |
          env | grep -i conda || echo "No conda environment variables found"
          if type conda > /dev/null ; then
            echo "Base environment location:"
            conda info --base
          else
            echo "Conda not found..."
          fi

          for f in bash_profile bashrc xonshrc
          do
            [ ! -e $HOME/.$f ] && continue
            echo ""
            echo "<<< .$f >>>"
            cat $HOME/.$f
          done

      - name: Install from legacy script
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
          GITHUB_CI: true
        run: |
          echo "Running legacy script from $REMOTE_PS on branch $BRANCH_PS with Python $PYTHON_VERSION_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/2024_legacy/MacOS_AutoInstall.sh)"

      - name: Verify VS Code
        run: |
          code --version
          retval=$?
          if [[ $retval -ne 0 ]]; then
            echo "VS Code not installed correctly"
            exit $retval
          fi

      - name: Verify conda
        run: |
          which conda
          retval=$?
          if [[ $retval -ne 0 ]]; then
            echo "Conda not installed correctly"
            exit $retval
          fi

          # Some more output
          conda --version
          conda info --base

      - name: Verify python (3.11)
        run: |
          which python3

          # Verify the installed Python version
          EXPECTED_VERSION="3.11"
          INSTALLED_VERSION=$(python3 --version | cut -d " " -f 2)
          if [[ "$INSTALLED_VERSION" != "$EXPECTED_VERSION"* ]]; then
            echo "Installed Python version ($INSTALLED_VERSION) does not match expected version ($EXPECTED_VERSION)"
            exit 1
          fi
          echo "Correct Python version $INSTALLED_VERSION is installed."

          # Verify Python package imports
          python3 -c "import dtumathtools, pandas, scipy, statsmodels, uncertainties; print('Packages imported successfully')" || { echo "Failed to import Python packages"; exit 1; }

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test-constructor]
    if: github.ref == "refs/heads/main" && github.event_name == "push"
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download Unified DTU PKG
        uses: actions/download-artifact@v4
        with:
          name: dtu-unified-pkg
          path: ./release-assets
          
      - name: Generate Release Tag
        id: tag
        run: |
          DATE=$(date +"%Y.%m.%d")
          SHORT_SHA=$(git rev-parse --short HEAD)
          TAG="v${DATE}-${SHORT_SHA}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: "DTU Python Development Environment ${{ steps.tag.outputs.tag }}"
          body: |
            ## DTU Python Development Environment
            
            **Complete unified installer tested and verified!**
            
            ### Installation
            ```bash
            # Download and double-click the PKG file, or use command line:
            sudo installer -pkg DTU-Python-Development-Environment-*.pkg -target /
            ```
            
            ### What's Included
            - **Python 3.11 Environment**: Complete conda-based Python with scientific packages
            - **Scientific Packages**: pandas, scipy, statsmodels, uncertainties, dtumathtools  
            - **Visual Studio Code**: Professional code editor with Python extensions
            - **Complete Setup**: Everything needed for DTU coursework in one installer
            
            Generated with [Claude Code](https://claude.ai/code)
            
            Co-Authored-By: Claude <noreply@anthropic.com>
          files: |
            release-assets/*.pkg
          draft: false
          prerelease: false
